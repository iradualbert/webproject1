# Generated by Django 3.0.2 on 2020-03-20 12:55

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import image_cropping.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Answer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_content', models.TextField()),
                ('answer_link', models.CharField(max_length=1000, null=True)),
                ('answer_total_likes', models.IntegerField(default=0)),
                ('answer_total_dislikes', models.IntegerField(default=0)),
                ('answer_total_modifications', models.IntegerField(default=0)),
                ('answer_total_rates', models.IntegerField(default=0)),
                ('answer_average_rate', models.FloatField(null=True)),
                ('answer_total_reviews', models.IntegerField(default=0)),
                ('answer_total_shares', models.IntegerField(default=0)),
                ('date_submitted', models.DateTimeField(auto_now_add=True)),
                ('answer_total_views', models.IntegerField(default=0)),
                ('marks', models.FloatField(default=50)),
                ('is_edited', models.BooleanField(default=False)),
                ('is_confirmed', models.BooleanField(default=False)),
                ('answer_views', models.ManyToManyField(to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['marks', 'date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='ByDrawing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Channel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('channel_name', models.CharField(max_length=20)),
                ('channel_username', models.CharField(max_length=20, unique=True)),
                ('channel_code', models.CharField(max_length=20, unique=True)),
                ('channel_profile_pic', image_cropping.fields.ImageCropField(default='media/Noprofile.PNG', upload_to='media/channel_profile_pics')),
                ('cropping', image_cropping.fields.ImageRatioField('channel_profile_pic', '430x360', adapt_rotation=False, allow_fullsize=False, free_crop=False, help_text=None, hide_image_field=False, size_warning=False, verbose_name='cropping')),
                ('bio', models.TextField(max_length=200, null=True)),
                ('website', models.CharField(max_length=500, null=True)),
                ('date_created', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('verified', models.BooleanField(default=False)),
                ('private', models.BooleanField(default=True)),
                ('category', models.CharField(choices=[('Books', 'Books Publication'), ('Movies', 'Movies'), ('Education', 'Education'), ('Business', 'Business'), ('Personal', 'Personal Blog'), ('NGOS', 'Non Profit Organization'), ('Other', 'Other')], max_length=50)),
                ('owner', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='channel_creator', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Photo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('caption', models.TextField(null=True)),
                ('image', models.ImageField(upload_to='Channel/answer_pics')),
            ],
        ),
        migrations.CreateModel(
            name='ProductService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('product_name', models.CharField(max_length=50)),
                ('product_profife_picture', models.ImageField(default='no_image', upload_to='Channel/product_profile_pics')),
                ('guide_info', models.TextField(null=True)),
                ('product_info', models.TextField(null=True)),
                ('date_created', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('admins', models.ManyToManyField(related_name='product_admin', to=settings.AUTH_USER_MODEL)),
                ('business', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
            ],
            options={
                'ordering': ['date_created'],
            },
        ),
        migrations.CreateModel(
            name='StepByStep',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Subscriber',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user_id', models.IntegerField()),
                ('channel_id', models.IntegerField()),
                ('date_subscribed', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('notification', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='TopicRateReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('topic_review_content', models.TextField()),
                ('topic_rate', models.FloatField()),
                ('channel_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='Topic',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('topic_title', models.CharField(max_length=20)),
                ('topic_image', models.ImageField(default='default_topic_pic', upload_to='media/topic_pics')),
                ('description', models.TextField(null=True)),
                ('website', models.TextField(null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('parent_channel', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
                ('subscribers', models.ManyToManyField(related_name='channel_subscribers', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_created'],
            },
        ),
        migrations.CreateModel(
            name='RateReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('review_content', models.TextField()),
                ('rate', models.FloatField()),
                ('channel_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_title', models.CharField(max_length=250)),
                ('question_detail', models.TextField(blank=True, null=True)),
                ('question_total_followers', models.IntegerField(default=0, null=True)),
                ('question_total_answers', models.IntegerField(default=0, null=True)),
                ('date_submitted', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('channel_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
                ('question_followers', models.ManyToManyField(related_name='question_followers', to=settings.AUTH_USER_MODEL)),
                ('question_topic', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='Channel.Topic')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asked_by', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_submitted'],
            },
        ),
        migrations.CreateModel(
            name='ProductServiceRateReview',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_submitted', models.DateTimeField(default=datetime.datetime.utcnow)),
                ('product_service_review_content', models.TextField()),
                ('product_service_rate', models.FloatField()),
                ('product_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.ProductService')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['date_submitted'],
            },
        ),
        migrations.AddField(
            model_name='productservice',
            name='topic',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='Channel.Topic'),
        ),
        migrations.CreateModel(
            name='ChannelAdmin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.TextField(blank=True, null=True)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('notification', models.BooleanField(default=False)),
                ('is_accepted', models.BooleanField(default=False)),
                ('channel_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Channel')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='AnswerView',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_viewed', models.DateTimeField(auto_now_add=True)),
                ('answer_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Answer')),
                ('user_info', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='answer',
            name='question_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Channel.Question'),
        ),
        migrations.AddField(
            model_name='answer',
            name='user_info',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answer_owner', to=settings.AUTH_USER_MODEL),
        ),
    ]
